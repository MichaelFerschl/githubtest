name: Claude Issue Auto-Fix

on:
  issues:
    types: [opened]

jobs:
  analyze-and-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze and Fix Issue with Claude
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Grant permissions needed for creating branches and PRs
          additional_permissions: |
            contents: write
            pull-requests: write
            issues: write
          
          # Use Claude Opus for better code generation
          model: "claude-opus-4-20250514"
          
          # Allow Claude to run git commands and other tools needed for fixing
          allowed_tools: |
            Bash(git checkout -b *),
            Bash(git add *),
            Bash(git commit *),
            Bash(git push *),
            Bash(gh pr create *),
            Bash(gh issue comment *),
            Bash(npm *),
            Bash(python *),
            Read,
            Write,
            Edit,
            MultiEdit,
            Grep,
            Glob,
            LS,
            Task
          
          # Custom instructions for automatic issue handling
          custom_instructions: |
            WICHTIG: Du sollst IMMER versuchen, das Issue zu lösen und einen Pull Request zu erstellen!
            
            Deine Aufgabe:
            1. Analysiere das neue Issue genau
            2. Erstelle IMMER einen neuen Branch: 'fix-issue-${{ github.event.issue.number }}'
            3. Implementiere die Lösung basierend auf der Issue-Beschreibung:
               - Wenn das Issue klar ist: Implementiere die Lösung direkt
               - Wenn das Issue unklar ist: Mache vernünftige Annahmen und implementiere eine Lösung
               - Erstelle neue Dateien wenn nötig
               - Bearbeite existierende Dateien wenn nötig
            4. Committe alle Änderungen mit einer beschreibenden Nachricht
            5. Pushe den Branch: git push -u origin fix-issue-${{ github.event.issue.number }}
            6. Erstelle IMMER einen Pull Request mit:
               - Titel: "Fix: ${{ github.event.issue.title }}"
               - Body mit: "Fixes #${{ github.event.issue.number }}" und Beschreibung der Änderungen
            7. Kommentiere im Issue mit einer Zusammenfassung und Link zum PR
            
            WICHTIG: 
            - Erstelle IMMER einen Pull Request, auch wenn die Lösung nicht perfekt ist
            - Wenn Information fehlt, mache vernünftige Annahmen
            - Der PR kann später diskutiert und verbessert werden
            - Verwende git checkout -b für neuen Branch
            - Verwende gh pr create für Pull Request Erstellung
            
            Beispiel Befehle:
            ```bash
            git checkout -b fix-issue-${{ github.event.issue.number }}
            # ... make changes ...
            git add .
            git commit -m "Fix: ${{ github.event.issue.title }}"
            git push -u origin fix-issue-${{ github.event.issue.number }}
            gh pr create --title "Fix: ${{ github.event.issue.title }}" --body "Fixes #${{ github.event.issue.number }}\n\n## Changes\n- Description of changes"
            ```
            
            Issue Details:
            - Titel: ${{ github.event.issue.title }}
            - Beschreibung: ${{ github.event.issue.body }}
            - Nummer: #${{ github.event.issue.number }}
            - URL: ${{ github.event.issue.html_url }}
          
          # Environment variables
          claude_env: |
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            ISSUE_NUMBER: ${{ github.event.issue.number }}
            ISSUE_TITLE: ${{ github.event.issue.title }}